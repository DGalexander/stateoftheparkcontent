# Lets tidy it up & add the choropleth bit :)
fig6_p_tidy <- tidy(fig6_p)
fig6_p_tidy$id <- as.numeric(fig6_p_tidy$id)
#RegionSP@data$objectid <- as.factor(RegionSP@data$objectid)
fig6_p_tidy2 = fig6_p_tidy %>% left_join(.,  RegionSP@data, by=c("id"="objectid"))
ggplot() + geom_polygon(data = fig6_p_tidy2, aes(fill = Percentage, x = long.y, y = lat.y, group = Percentage) , size=10, alpha=0.9) + coord_map()
fig6_p_tidy <- as.spatialPolygonsDataFrame(tidy(fig6_p))
fig6_p_tidy <- spatialPolygonsDataFrame(tidy(fig6_p))
fig6_p_tidy <- SpatialPolygonsDataFrame(tidy(fig6_p))
# Load the extra libraries for maping
library("GISTools")
RegionSP <- readShapePoly("~/GitHub/stateoftheparkcontent/Tourism_Data/SP/Regions_December_2017_Ultra_Generalised_Clipped_Boundaries_in_England.shp")
# Read the data
fig6 <- read_csv("Tourism_Data/Figure_6.csv")
# View the data
##################as_tibble(fig6)
#library(broom)
# Merge the data to the SP boundary
RegionSP <- merge(RegionSP, fig6, by.x="rgn17nm", by.y="Region")
#Create Cartogram & Choropleth
fig6_p <- cartogram(RegionSP, "Percentage", itermax=5)
fig6_p_tidy <- SpatialPolygonsDataFrame(tidy(fig6_p))
ggplot() + geom_polygon(data = fig6_p, aes(fill = Percentage, x = long, y = lat, group = Percentage) , size=10, alpha=0.9) + coord_map()
ggplot() + geom_polygon(data = fig6_p, aes(fill = "Percentage", x = long, y = lat, group = Percentage) , size=10, alpha=0.9) + coord_map()
ggplot() + geom_polygon(data = fig6_p, aes(fill = fig6_p$Percentage, x = long, y = lat, group = Percentage) , size=10, alpha=0.9) + coord_map()
ggplot() + geom_polygon(data = fig6_p, aes(fill = fig6_p$Percentage, x = long, y = lat, group = fig6_p$Percentage) , size=10, alpha=0.9) + coord_map()
ggplot() + geom_polygon(data = fig6_p, aes(fill = fig6_p$Percentage, x = fig6_p$long, y = fig6_p$lat, group = fig6_p$Percentage) , size=10, alpha=0.9) + coord_map()
ggplot() + geom_polygon(data = fig6_p, aes(fill = fig6_p$Percentage, x = fig6_p$long, y = fig6_p$lat, group = fig6_p$rgn17cd) , size=10, alpha=0.9) + coord_map()
ggplot() + geom_polygon(data = fig6_p, aes(fill = fig6_p$rgn17cd, x = fig6_p$long, y = fig6_p$lat, group = fig6_p$rgn17cd) , size=10, alpha=0.9) + coord_map()
RegionSP <- readShapePoly("~/GitHub/stateoftheparkcontent/Tourism_Data/SP/Regions_December_2017_Ultra_Generalised_Clipped_Boundaries_in_England.shp")
# Read the data
fig6 <- read_csv("Tourism_Data/Figure_6.csv")
# View the data
as_tibble(fig6)
#library(broom)
# Merge the data to the SP boundary
RegionSP <- merge(RegionSP, fig6, by.x="rgn17nm", by.y="Region")
View(RegionSP)
RegionSP@data[["rgn17nm"]]
RegionSP@data[["Percentage"]]
#Create Cartogram & Choropleth
fig6_p <- cartogram(RegionSP, "Percentage", itermax=5)
#Create Cartogram & Choropleth
fig6_p <- cartogram_cont(RegionSP, "Percentage", itermax=5)
ggplot() + geom_polygon(data = fig6_p, aes(fill = fig6_p$rgn17cd, x = fig6_p$long, y = fig6_p$lat, group = fig6_p$rgn17cd) , size=10, alpha=0.9) + coord_map()
fig6_p_tidy <- SpatialPolygonsDataFrame(tidy(fig6_p))
fig6_p_tidy <- tidy(SpatialPolygonsDataFrame(fig6_p))
fig6_p_tidy <- tidy(fig6_p)
warnings()
fig6_p$id <- as.numeric(fig6_p$id)
data(wrld_simpl)
data(wrld_simpl)
afr=wrld_simpl[wrld_simpl$REGION==2,]
plot(afr)
afr_cartogram <- cartogram_cont(afr, "POP2005", itermax=5)
st_transform()?
?st_transform()
st_transform(afr,"+init=epsg:3857")
install.packages("sf")
library(sf)
st_transform(afr,"+init=epsg:3857")
st_transform(afr,3857)
## Set Wd
setwd("~/GitHub/stateoftheparkcontent")
## Load tidyverse
library(tidyverse)
#library(plotly)
library(kableExtra)
# Load the extra Library
library(cartogram)
library(tmap)
#library(broom)
# Merge the data to the SP boundary
RegionSP <- merge(RegionSP, fig6, by.x="rgn17nm", by.y="Region")
# Load the extra libraries for maping
library("GISTools")
RegionSP <- readShapePoly("~/GitHub/stateoftheparkcontent/Tourism_Data/SP/Regions_December_2017_Ultra_Generalised_Clipped_Boundaries_in_England.shp")
# Read the data
fig6 <- read_csv("Tourism_Data/Figure_6.csv")
# View the data
##################as_tibble(fig6)
# Load the extra Libraries
library(cartogram)
library(tmap)
#library(broom)
# Merge the data to the SP boundary
RegionSP <- merge(RegionSP, fig6, by.x="rgn17nm", by.y="Region")
#Create Cartogram & Choropleth
fig6_p <- cartogram(RegionSP, "Percentage", itermax=5)
#tm_shape(fig6_p) + tm_polygons("Percentage", style = "jenks") +
tm_layout(frame = FALSE, legend.position = c("left", "top"))
afr <- spTransform(afr, CRS("+init=epsg:3395"))
data(wrld_simpl)
afr=wrld_simpl[wrld_simpl$REGION==2,]
plot(afr)
afr <- spTransform(afr, CRS("+init=epsg:3395"))
data(wrld_simpl)
afr=wrld_simpl[wrld_simpl$REGION==2,]
afr <- spTransform(afr, CRS("+init=epsg:3395"))
afr_cont <- cartogram_cont(afr, "POP2005", itermax = 5)
spdf_fortified <- tidy(afr_cartogram)
library(broom)
spdf_fortified <- tidy(afr_cartogram)
spdf_fortified <- tidy(afr_cont)
spdf_fortified = spdf_fortified %>% left_join(. , afr_cartogram@data, by=c("id"="ISO3"))
spdf_fortified = spdf_fortified %>% left_join(. , afr_cont@data, by=c("id"="ISO3"))
spdf_fortified <- tidy(afr_cont)
spdf_fortified2 = spdf_fortified %>% left_join(. , afr_cont@data, by=c("id"="ISO3"))
ggplot() +
geom_polygon(data = spdf_fortified2, aes(fill = POP2005, x = long, y = lat, group = group) , size=0, alpha=0.9) +
coord_map() +
theme_void()
ggplot() +
geom_polygon(data = spdf_fortified2, aes(fill = POP2005, x = long, y = lat, group = group) , size=0, alpha=0.9) +
coord_map() +
theme_void()
ggplot() +
geom_polygon(data = spdf_fortified2, aes(fill = POP2005, x = long, y = lat, group = group) , size=0, alpha=0.9) +
coord_map()
ggplot() +
geom_polygon(data = spdf_fortified2, aes(fill = POP2005, x = LAT, y = LON, group = group) , size=0, alpha=0.9) +
coord_map()
# Load the extra Libraries
library(cartogram)
library(tmap)
#library(broom)
# Merge the data to the SP boundary
RegionSP <- merge(RegionSP, fig6, by.x="rgn17nm", by.y="Region")
# Load the extra Libraries
library(cartogram)
library(tmap)
#library(broom)
# Merge the data to the SP boundary
RegionSP <- merge(RegionSP, fig6, by.x="rgn17nm", by.y="Region")
# Load the extra libraries for maping
library("GISTools")
RegionSP <- readShapePoly("~/GitHub/stateoftheparkcontent/Tourism_Data/SP/Regions_December_2017_Ultra_Generalised_Clipped_Boundaries_in_England.shp")
# Read the data
fig6 <- read_csv("Tourism_Data/Figure_6.csv")
# View the data
##################as_tibble(fig6)
# Load the extra Libraries
library(cartogram)
library(tmap)
#library(broom)
# Merge the data to the SP boundary
RegionSP <- merge(RegionSP, fig6, by.x="rgn17nm", by.y="Region")
#Create Cartogram & Choropleth
fig6_p <- cartogram(RegionSP, "Percentage", itermax=5)
tm_shape(fig6_p) + tm_polygons("Percentage", style = "jenks") +
tm_layout(frame = FALSE, legend.position = c("left", "top"))
# Load the extra Libraries
library(cartogram)
library(tmap)
#library(broom)
# Merge the data to the SP boundary
RegionSP <- merge(RegionSP, fig6, by.x="rgn17nm", by.y="Region")
#Create Cartogram & Choropleth
fig6_p <- cartogram(RegionSP, "Percentage", itermax=7)
# Load the extra Libraries
library(cartogram)
library(tmap)
#library(broom)
# Merge the data to the SP boundary
RegionSP <- merge(RegionSP, fig6, by.x="rgn17nm", by.y="Region")
#Create Cartogram & Choropleth
fig6_p <- cartogram(RegionSP, "Percentage", itermax=7)
tm_shape(fig6_p) + tm_polygons("Percentage", style = "jenks") +
tm_layout(frame = FALSE, legend.position = c("left", "top"))
tm_shape(fig6_p) + tm_polygons("Percentage", style = "jenks", palette = "RdYlBu") +
tm_layout(frame = FALSE, legend.position = c("left", "top"))
pallet?
?pallet
?pallette
??pallette
tm_shape(fig6_p) + tm_polygons("Percentage", style = "jenks", palette = "Purples") +
tm_layout(frame = FALSE, legend.position = c("left", "top"))
tm_shape(fig6_p) + tm_polygons("Percentage", style = "jenks", palette = "RdPu") +
tm_layout(frame = FALSE, legend.position = c("left", "top"))
tm_shape(fig6_p) + tm_polygons("Percentage", style = "jenks", palette = "PuRd") +
tm_layout(frame = FALSE, legend.position = c("left", "top"))
RegionSP <- spTransform(RegionSP, CRS("+init=epsg:3395"))
RegionSP <- sp(RegionSP, CRS("+init=epsg:3395"))
# plot a graph
fig1_p <- ggplot(data = fig1, aes(x=Year, y=Millions, fill=Visit_Type)) +
geom_bar(stat = "identity", position=position_dodge()) +
scale_fill_manual(values=c("#999999", "#8d395b")) +
xlab("Year") + ylab("Millions (000's)") +
ggtitle("Figure 1: STEAM Volume of visits in Visitor Days & Visitor Numbers 2009-2018") +
coord_cartesian(xlim =c(2009, 2018)) +
theme_minimal()
# Read the data
fig1 <- read_csv("Tourism_Data/Figure_1.csv")
# View the data
as_tibble(fig1)
# plot a graph
fig1_p <- ggplot(data = fig1, aes(x=Year, y=Millions, fill=Visit_Type)) +
geom_bar(stat = "identity", position=position_dodge()) +
scale_fill_manual(values=c("#999999", "#8d395b")) +
xlab("Year") + ylab("Millions (000's)") +
ggtitle("Figure 1: STEAM Volume of visits in Visitor Days & Visitor Numbers 2009-2018") +
coord_cartesian(xlim =c(2009, 2018)) +
theme_minimal()
# output a plot
ggplotly(fig1_p) %>%
layout(legend = list(orientation = "h", x = 0.4, y = -0.2))
## Set Wd
setwd("~/GitHub/stateoftheparkcontent")
## Load tidyverse
library(tidyverse)
#library(plotly)
library(kableExtra)
## Set Wd
setwd("~/GitHub/stateoftheparkcontent")
## Load tidyverse
library(tidyverse)
library(plotly)
library(kableExtra)
# plot a graph
fig12_p <- ggplot(data = fig12, aes(x=Month, y=Count, group=Mode)) +
geom_line(colour = "#8d395b") +
xlab("Month") + ylab("Number") +
ggtitle("Figure 12: Cyclists & Walkers 2 way counts Hassop Station Monsal Trail 2017") +
theme_minimal()
# Read the data
fig15 <- read_csv("Tourism_Data/Figure_15.csv")
# order a factor for plotting
fig15$Month <- factor(fig15$Month, levels = month.abb)
# View the data
as_tibble(fig15)
# plot a graph
fig15_p <- ggplot(data = fig15, aes(x=Month, y=Count, fill=Type)) +
geom_bar(stat = "identity", position="stack") +
scale_fill_manual(values=c("#999999", "#8d395b")) +
xlab("Month") + ylab("Bed Supply") +
ggtitle("Figure 15: Seasonal Availability of bed supply STEAM 2018") +
theme_minimal()
# output a plot
ggplotly(fig15_p) %>%
layout(legend = list(orientation = "h", x = 0.4, y = -0.2))
## Set Wd
setwd("~/GitHub/stateoftheparkcontent")
## Load tidyverse
library(tidyverse)
library(plotly)
library(kableExtra)
library(htmlwidgets)
# Save Widget
saveWidget(widget = fig1_p, file = 'fig1_p.html')
# Save Widget
saveWidget(widget = fig1_p, file = 'fig1.html')
# Save Widget
saveWidget(widget = fig1_p, file = 'Tourism_Data/fig1_p.html')
htmlwidgets::saveWidget(fig1_p, "index.html")
fig1_p <- ggplotly(fig1_p) %>%
layout(legend = list(orientation = "h", x = 0.4, y = -0.2))
htmlwidgets::saveWidget(fig1_p, "index.html")
# Save Widget
saveWidget(widget = fig1_p, file = 'Tourism_Data/fig1_p.html')
# Save Widget
saveWidget(widget = fig1_p, file = 'fig1_p.html')
# Save Widget
saveWidget(widget = fig1_p, file = '~/GitHub/stateoftheparkcontent/Tourism_html/fig1_p.html')
# read data
fig2 <- read_csv("Tourism_Data/Figure_2.csv")
# order a factor for plotting
fig2$Month <- factor(fig2$Month, levels = month.abb)
# View the data
as_tibble(fig2)
# plot a graph
fig2_p <- ggplot(data = fig2, aes(x=Month, y=Visitor_Days, group=1)) +
geom_line(colour = "#8d395b") +
xlab("Month 2018") + ylab("Visitor Days") +
ggtitle("Figure 2: STEAM Volume of visits in Visitor Days per month 2018") +
theme_minimal()
# output a plot
fig2_p <- ggplotly(fig2_p)
fig2_p
saveWidget(widget = fig1_p, file = 'fig1_p.html')
# plot a graph
fig2_p <- ggplot(data = fig2, aes(x=Month, y=Visitor_Days, group=1)) +
geom_line(colour = "#8d395b") +
xlab("Month 2018") + ylab("Visitor Days") +
ggtitle("Figure 2: STEAM Volume of visits in Visitor Days per month 2018") +
theme_minimal()
# output a plot
fig2_p <- ggplotly(fig2_p)
fig2_p
saveWidget(widget = fig1_p, file = 'fig2_p.html')
# Read the data
fig1 <- read_csv("Tourism_Data/Figure_1.csv")
# View the data
as_tibble(fig1)
# read data
fig4 <- read_csv("Tourism_Data/Figure_4.csv")
# View the data
as_tibble(fig4)
colors <- c('rgb(141,57,91)', 'rgb(128,133,133)', 'rgb(144,103,167)', 'rgb(171,104,87)','rgb(114,147,203)','rgb(144,103,167)', 'rgb(171,104,87)', 'rgb(114,147,203)')
fig4_p <- plot_ly(fig4, labels = ~Economic_Activity, values = ~Percentage, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste(Economic_Activity, Percentage * 100,'%'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%
layout(title = 'Figure 4: Economic Activity Visitor Survey 2015',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
# output a plot
fig4_p <- ggplotly(fig4_p)
fig4_p
# Save Widget
saveWidget(widget = fig4_p, file = 'fig4_p.html')
# Read the data
fig5 <- read_csv("Tourism_Data/Figure_5.csv")
# View the data
as_tibble(fig5)
# plot a graph
fig5_p <- plot_ly(fig5, x = ~Group_Size, y = ~Percentage, type = 'bar', color = I("#8d395b")) %>%
layout(title = "Figure 5: Group Size Visitor Survey 2015 ",
xaxis = list(title = "Group Size"),
yaxis = list(title = "Percentage"))
# output a plot
fig5_p
# Save Widget
saveWidget(widget = fig5_p, file = 'fig5_p.html')
# Load the extra libraries for maping
library("GISTools")
RegionSP <- readShapePoly("~/GitHub/stateoftheparkcontent/Tourism_Data/SP/Regions_December_2017_Ultra_Generalised_Clipped_Boundaries_in_England.shp")
# Read the data
fig6 <- read_csv("Tourism_Data/Figure_6.csv")
# View the data
##################as_tibble(fig6)
# Load the extra Libraries
library(cartogram)
library(tmap)
#library(broom)
# Merge the data to the SP boundary
RegionSP <- merge(RegionSP, fig6, by.x="rgn17nm", by.y="Region")
#Create Cartogram & Choropleth
fig6_p <- cartogram(RegionSP, "Percentage", itermax=7)
fig6_p <- tm_shape(fig6_p) + tm_polygons("Percentage", style = "jenks", palette = "PuRd") +
tm_layout(frame = FALSE, legend.position = c("left", "top"))
fig6_p
# Save Widget
saveWidget(widget = fig6_p, file = 'fig6_p.html')
# Read the data
fig7 <- read_csv("Tourism_Data/Figure_7.csv")
# View the data
as_tibble(fig7)
# plot a graph
fig7_p <- plot_ly(fig7, x = ~Knowledge, y = ~Percentage, type = 'bar', color = I("#8d395b")) %>%
layout(title = "Figure 7: Knowledge about the Peak District",
xaxis = list(title = "Knowledge about the Park", tickangle = -0),
yaxis = list(title = "Percentage"))
# output a plot
fig7_p
# Save Widget
saveWidget(widget = fig7_p, file = 'fig7_p.html')
# Read the data
fig8 <- read_csv("Tourism_Data/Figure_8.csv")
# View the data
as_tibble(fig8)
# plot a graph
fig8_p <- plot_ly(fig8, x = ~Likelihood, y = ~Percentage, type = 'bar', color = I("#8d395b")) %>%
layout(title = "Figure 8: Likelihood to visit the National Park in the future",
xaxis = list(title = "Likelihood to visit the Park"),
yaxis = list(title = "Percentage"))
# output a plot
fig8_p
# Save Widget
saveWidget(widget = fig8_p, file = 'fig8_p.html')
kable(fig9) %>%
kable_styling(bootstrap_options = "striped", "condensed", full_width = F)
# Read the data
fig9 <- read_csv("Tourism_Data/Figure_9.csv")
# View the data
as_tibble(fig9)
kable(fig9) %>%
kable_styling(bootstrap_options = "striped", "condensed", full_width = F)
save_kable(file = "fig9_p.html", self_contained = T)
kable(fig9) %>%
kable_styling(bootstrap_options = "striped", "condensed", full_width = F) %>%
save_kable(file = "fig9_p.html", self_contained = T)
# read data
fig10 <- read_csv("Tourism_Data/Figure_10.csv")
# order a factor for plotting
fig10$Month <- factor(fig10$Month, levels = month.abb)
# View the data
as_tibble(fig10)
# Read the data
fig11 <- read_csv("Tourism_Data/Figure_11.csv")
# View the data
as_tibble(fig11)
kable(fig11) %>%
kable_styling(bootstrap_options = "striped", "condensed", full_width = F) %>%
save_kable(file = "fig11_p.html", self_contained = T)
# read data
fig12 <- read_csv("Tourism_Data/Figure_12.csv")
# order a factor for plotting
fig12$Month <- factor(fig12$Month, levels = month.abb)
# View the data
as_tibble(fig12)
# Read the data
fig13 <- read_csv("Tourism_Data/Figure_13.csv")
# View the data
as_tibble(fig13)
kable(fig13) %>%
kable_styling(bootstrap_options = "striped", "condensed", full_width = F) %>%
save_kable(file = "fig13_p.html", self_contained = T)
# Read the data
fig14 <- read_csv("Tourism_Data/Figure_14.csv")
# View the data
as_tibble(fig14)
kable(fig14) %>%
kable_styling(bootstrap_options = "striped", "condensed", full_width = F) %>%
save_kable(file = "fig14_p.html", self_contained = T)
# read data
fig10 <- read_csv("Tourism_Data/Figure_10.csv")
# order a factor for plotting
fig10$Month <- factor(fig10$Month, levels = month.abb)
# View the data
as_tibble(fig10)
# plot a graph
fig10_p <- ggplot(data = fig10, aes(x=Month, y=Contacts, group=1)) +
geom_line(colour = "#8d395b") +
xlab("Month") + ylab("Number of Contacts") +
ggtitle("Figure 10: Figure 10: Monthly Visitor Centre Contacts 2018") +
theme_minimal()
# output a plot
fig10_p <- ggplotly(fig10_p)
fig10_p
# Save Widget
saveWidget(widget = fig10_p, file = 'fig8_p.html')
# plot a graph
fig10_p <- ggplot(data = fig10, aes(x=Month, y=Contacts, group=1)) +
geom_line(colour = "#8d395b") +
xlab("Month") + ylab("Number of Contacts") +
ggtitle("Figure 10: Figure 10: Monthly Visitor Centre Contacts 2018") +
theme_minimal()
# output a plot
fig10_p <- ggplotly(fig10_p)
fig10_p
# Save Widget
saveWidget(widget = fig10_p, file = 'fig10_p.html')
# plot a graph
fig8_p <- plot_ly(fig8, x = ~Likelihood, y = ~Percentage, type = 'bar', color = I("#8d395b")) %>%
layout(title = "Figure 8: Likelihood to visit the National Park in the future",
xaxis = list(title = "Likelihood to visit the Park"),
yaxis = list(title = "Percentage"))
# output a plot
fig8_p
# Save Widget
saveWidget(widget = fig8_p, file = 'fig8_p.html')
# read data
fig12 <- read_csv("Tourism_Data/Figure_12.csv")
# order a factor for plotting
fig12$Month <- factor(fig12$Month, levels = month.abb)
# View the data
as_tibble(fig12)
# plot a graph
fig12_p <- ggplot(data = fig12, aes(x=Month, y=Count, group=Mode)) +
geom_line(colour = "#8d395b") +
xlab("Month") + ylab("Number") +
ggtitle("Figure 12: Cyclists & Walkers 2 way counts Hassop Station Monsal Trail 2017") +
theme_minimal()
# output a plot
fig12_p <- ggplotly(fig12_p)
# Save Widget
saveWidget(widget = fig12_p, file = 'fig8_p.html')
# plot a graph
fig12_p <- ggplot(data = fig12, aes(x=Month, y=Count, group=Mode)) +
geom_line(colour = "#8d395b") +
xlab("Month") + ylab("Number") +
ggtitle("Figure 12: Cyclists & Walkers 2 way counts Hassop Station Monsal Trail 2017") +
theme_minimal()
# output a plot
fig12_p <- ggplotly(fig12_p)
fig12_p
# Save Widget
saveWidget(widget = fig12_p, file = 'fig12_p.html')
# Read the data
fig15 <- read_csv("Tourism_Data/Figure_15.csv")
# order a factor for plotting
fig15$Month <- factor(fig15$Month, levels = month.abb)
# View the data
as_tibble(fig15)
# plot a graph
fig15_p <- ggplot(data = fig15, aes(x=Month, y=Count, fill=Type)) +
geom_bar(stat = "identity", position="stack") +
scale_fill_manual(values=c("#999999", "#8d395b")) +
xlab("Month") + ylab("Bed Supply") +
ggtitle("Figure 15: Seasonal Availability of bed supply STEAM 2018") +
theme_minimal()
# output a plot
fig15_p <- ggplotly(fig15_p) %>%
layout(legend = list(orientation = "h", x = 0.4, y = -0.2))
fig15_p
# Save Widget
saveWidget(widget = fig15_p, file = 'fig15_p.html')
# plot a graph
fig8_p <- plot_ly(fig8, x = ~Likelihood, y = ~Percentage, type = 'bar', color = I("#8d395b")) %>%
layout(title = "Figure 8: Likelihood to visit the National Park in the future",
xaxis = list(title = "Likelihood to visit the Park"),
yaxis = list(title = "Percentage"))
# output a plot
fig8_p
# Save Widget
saveWidget(widget = fig8_p, file = 'fig8_p.html')
